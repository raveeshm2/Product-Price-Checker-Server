{"version":3,"sources":["global/request.ts","global/model/errors.ts","global/model/interpreter.ts","global/requests.ts","global/store/request.ts","forms/InputField.tsx","global/store/saga-base.ts","ui/toast/action.tsx","products/productList/store/saga.ts","modal/DeleteModal.tsx","models/product.ts","forms/SelectField.tsx","ui/ButtonSpinner.tsx","modal/EditModal.tsx","modal/AddProductModal.tsx","cron/store/saga.ts","cron/CronJobModal.tsx","login/store/saga.ts","modal/SettingsModal.tsx","Navbar/Navigation.tsx","ui/Spinner.tsx","images/not-available.png","products/product.tsx","products/productList/productList.tsx","ui/toast/reducer.ts","ui/toast/toast.tsx","login/login.tsx","App.tsx","reportWebVitals.ts","global/store/reducer.ts","login/store/reducer.ts","products/productList/store/reducer.ts","cron/store/reducer.ts","root/store/reducer.ts","global/store/main-saga.ts","index.tsx","root/store/store.ts"],"names":["RequestError","url","status","statusText","data","Error","request","input","init","headers","a","fetch","process","credentials","response","contentType","get","indexOf","clone","json","console","error","text","errorData","errorInterpreterWrapper","errorsInterpreter","fn","errorsPass","forEach","condition","requestWithErrorHandler","deserialize","payload","rest","body","JSON","stringify","undefined","received","makeRequestErrorDetector","statusCode","additionalCondition","e","makeErrorInterpreter","detector","errorMessage","serverErrors","errors","length","interpreters","defaultValue","notFoundErrorInterpreter","internalServerError","isAuthenticationErrorWithRedirect","includes","Requests","props","method","val","errorPass","defaultHeaders","getResourceInitialState","loading","requests","post","put","delete","errorDetectors","value","result","interpreter","WrappedComponent","Resource","type","requestActionType","this","errorActionType","responseActionType","reducer","state","action","SagaBase","assignment","key","handler","alert","message","bind","Object","keys","takeEvery","getHandler","createToast","header","show","className","PRODUCT_LIST_RESOURCE","ADD_PRODUCT_RESOURCE","EDIT_PRODUCT_RESOURCE","DELETE_PRODUCT_RESOURCE","ProductListSaga","scrape","addProduct","editProduct","deleteProduct","call","push","join","DeleteModal","product","onHide","dispatch","useDispatch","useSelector","products","deletePRoduct","id","useEffect","Modal","size","aria-labelledby","centered","Header","closeButton","Title","alias","Body","productName","he","decode","Footer","Button","variant","disabled","onClick","as","animation","role","aria-hidden","ProductValidationSchema","yup","required","cutOffPrice","matches","portal","CRONValidationSchema","email","SettingsValidationSchema","currentPassword","newPassword","min","confirmPassword","when","is","trim","then","equals","otherwise","max","LoginValidationSchema","password","InputAdapted","Form","Control","field","form","meta","onChange","setFieldValue","name","target","isValid","touched","isInvalid","Feedback","InputField","component","SelectAdapted","options","map","opt","selectFieldAdapter","SelectField","ButtonSpinner","loadingText","staticText","style","cursor","EditModal","updatedProduct","parseInt","toString","backdrop","initialValues","imgURL","onSubmit","validationSchema","dirty","Group","controlId","Label","placeholder","autoComplete","Text","AddProductModal","CRON_STATUS_RESOURCE","CRON_START_RESOURCE","CRON_STOP_RESOURCE","CronJobsSaga","startJob","stopJob","history","location","pathname","CronJobModal","cronStatusResponse","cron","cronStartResponse","cronStopResponse","onStop","hour","log","onStart","enableReinitialize","cronFrequency","Container","fluid","Row","Col","md","lg","height","LOGIN_RESOURCE","CHANGE_PASSWORD_RESOURCE","LOGOUT_RESOURCE","UserSaga","login","changePassword","logout","SettingsModal","user","settings","Navigation","useState","setAddProduct","cronJob","setCronJob","setSettings","Navbar","bg","fixed","expand","Brand","href","Toggle","aria-controls","Collapse","Nav","Link","Spinner","Product","noImage","Card","minWidth","Img","src","Subtitle","price","window","open","focus","setEditModal","setDeleteModal","ProductList","selectedProduct","setSelectedProduct","delectProduct","setDeleteProduct","list","marginTop","CardDeck","frontColor","find","initialState","autohide","minHeight","top","right","delay","Toast","toast","position","zIndex","onClose","Login","App","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","handleUndefinedState","combineSimplyfiedReducers","reducers","reduce","acc","addReducers","prev","User","router","Cron","MainSaga","sagas","all","saga","rootSaga","createBrowserHistory","sagaMiddleware","createSagaMiddleware","store","middlewares","composeEnhancers","compose","createStoreBase","combineReducers","connectRouter","Root","applyMiddleware","createStore","routerMiddleware","run","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.26507002.chunk.js","sourcesContent":["import { Interpreter } from \"./../global/model/interpreter\";\r\n\r\n/**\r\n * Take type T and omit one property\r\n * @param val\r\n */\r\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\r\n\r\n/**\r\n * A general request error class with extracted data, status, error message\r\n */\r\nexport class RequestError<T = null> extends Error {\r\n    public statusText: string | null;\r\n    public data: T;\r\n    constructor(\r\n        /**\r\n         * request url\r\n         */\r\n        public url: string,\r\n        /**\r\n         * status code\r\n         */\r\n        public status: number,\r\n        /**\r\n         * status text\r\n         */\r\n        statusText: string,\r\n        /**\r\n         * body data of the error response\r\n         */\r\n        data: T\r\n    ) {\r\n        super(`${url}: ${status}${statusText ? ` ${statusText}` : ''}`);\r\n        this.data = data;\r\n        this.statusText = statusText || null;\r\n    }\r\n}\r\n\r\n/**\r\n * Checks if any error is a request error\r\n * @param e\r\n */\r\nexport function isRequestError(e: any): e is RequestError<any> {\r\n    return !(e.data) && !(e.url) && !(e.status) && !(e.statusText);\r\n}\r\n\r\n/**\r\n * Returns null for null-typed Payload\r\n * @param input\r\n * @param init - headers from init are ignored\r\n * @param headers - here pass the headers\r\n */\r\nexport async function request<SentPayload, ReceivedPayload>(input: RequestInfo, init: RequestInit, headers?: HeadersInit): Promise<ReceivedPayload> {\r\n    const response = await fetch(`${process.env.REACT_APP_BASE_URL}${input}`, {\r\n        credentials: 'include',\r\n        headers,\r\n        ...init\r\n    });\r\n    if (response.status === 200) {\r\n        const contentType = response.headers.get(\"content-type\");\r\n        if (contentType && contentType.indexOf(\"application/json\") !== -1) {\r\n            try {\r\n                return await response.clone().json();\r\n            } catch (e) {\r\n                console.error(e);\r\n                console.error(response);\r\n                console.error(response.clone().text());\r\n                throw new Error('Error with JSON parsing');\r\n            }\r\n        }\r\n        return null as unknown as ReceivedPayload;\r\n    }\r\n    // if it is not 200 -> extract the error data and throw it\r\n    let errorData = null;\r\n    try {\r\n        errorData = await response.json();\r\n    } catch (e) { }\r\n    throw new RequestError(response.url, response.status, response.statusText, errorData);\r\n}\r\n\r\nexport interface CustomRequestInit<T> extends Omit<RequestInit, 'body'> {\r\n    /**\r\n     * A JS object to be sent in body before stringifying\r\n     */\r\n    payload?: T;\r\n}\r\n\r\n/**\r\n * Convert errors to some meaningful data\r\n * @param errorsInterpreter\r\n * @param errorsPass\r\n * @param fn\r\n */\r\nexport async function errorInterpreterWrapper<T, ErrorOutput>(\r\n    errorsInterpreter: Interpreter<Error, ErrorOutput>,\r\n    fn: () => Promise<T>,\r\n    errorsPass: Array<(err: any) => boolean> = []\r\n): Promise<T | ErrorOutput> {\r\n    try {\r\n        return await fn();\r\n    } catch (e) {\r\n        errorsPass.forEach(condition => {\r\n            if (condition(e)) {\r\n                throw e;\r\n            }\r\n        });\r\n        console.error(e);\r\n        const et = errorsInterpreter(e);\r\n        throw et;\r\n    }\r\n}\r\n\r\n/**\r\n * Make request and handle errors\r\n * @param input\r\n * @param init\r\n * @param errorsInterpreter\r\n * @param errorsPass detectors for errors which should be thrown out\r\n * @param deserialize\r\n * @param headers\r\n */\r\nexport async function requestWithErrorHandler<SentPayload, ReceivedPayload, ErrorOutput, DeserializedPayload>(\r\n    input: RequestInfo,\r\n    init: CustomRequestInit<SentPayload>,\r\n    errorsInterpreter: Interpreter<Error, ErrorOutput>,\r\n    errorsPass: Array<(e: any) => boolean>,\r\n    deserialize: (response: ReceivedPayload) => DeserializedPayload,\r\n    headers?: HeadersInit\r\n): Promise<DeserializedPayload | ErrorOutput> {\r\n    const { payload, ...rest } = init;\r\n    return errorInterpreterWrapper<DeserializedPayload, ErrorOutput>(errorsInterpreter, async () => {\r\n        const received: ReceivedPayload = await request(input, {\r\n            ...rest,\r\n            body: !(payload) ? undefined : JSON.stringify(payload)\r\n        }, {\r\n            ...headers\r\n        });\r\n        return deserialize(received);\r\n    }, errorsPass);\r\n}\r\n","import { isRequestError, RequestError } from \"../request\";\r\nimport { OptionalInterpreter } from \"./interpreter\";\r\n/**\r\n * A type for JS error exception object.\r\n *\r\n * TODO: make proper typing\r\n */\r\ntype Error = any;\r\n\r\nexport interface Errors {\r\n    errors: string[]\r\n}\r\n\r\n/**\r\n * Check if this is errors object.\r\n * This just checks for errors property, and not its format. The data format is expected to be either some payload,\r\n * or errors. This recognises between these two.\r\n *\r\n * @param data\r\n */\r\nexport function isError<T>(data: T | Errors): data is Errors {\r\n    return typeof (data) === 'object' && !(data) && !((data as unknown as Errors).errors);\r\n}\r\n\r\nexport const makeRequestErrorDetector = <T = any>(\r\n    statusCode: number,\r\n    additionalCondition?: (e: RequestError<T>) => boolean\r\n) => (\r\n    e: any\r\n): boolean => {\r\n        if (e.status !== statusCode) {\r\n            return false;\r\n        }\r\n        return !(additionalCondition) || additionalCondition(e);\r\n    };\r\n\r\n/**\r\n * This makes Interpreter for an HTTP request error which checks with `detector` if the `error` matches the model one.\r\n * If it does, then it generates a user readable message using status text and the error strings returned from backend,\r\n * if not returns undefined.\r\n * @param detector\r\n * @param errorMessage\r\n */\r\nexport const makeErrorInterpreter: (\r\n    detector: (error: Error) => boolean,\r\n    errorMessage: Errors\r\n) => OptionalInterpreter<Error, Errors> = (\r\n    detector: (e: any) => boolean,\r\n    errorMessage: Errors\r\n) => (error: Error): Errors | undefined => {\r\n    if (detector(error)) {\r\n        const serverErrors: string[] = error.data && error.data.errors ? error.data.errors : [];\r\n        if (serverErrors.length > 0)\r\n            return { errors: serverErrors }\r\n        return { errors: [...errorMessage.errors, ...serverErrors] };\r\n    }\r\n    return undefined;\r\n};\r\n\r\n/**\r\n * Generic Interpreter for an HTTP request error which checks for errors in Response\r\n * If found, then it generates a user readable message, with status text of HTTP error code\r\n * and error messages received from backend otherwise it returns undefined\r\n */\r\nexport function genericErrorInterpreter(error: any): Errors | undefined {\r\n    if (isRequestError(error)) {\r\n        const serverErrors = error.data && error.data.errors ? error.data.errors : [];\r\n        return { errors: [error.statusText, ...serverErrors] };\r\n    }\r\n    return undefined;\r\n};\r\n\r\n/**\r\n * This makes Interpreter for an HTTP request error which checks with `detector` if the `error` matches the model one.\r\n * If it does, then it generates a user readable message, if not returns undefined. The difference from\r\n * makeErrorInterpreter is that getErrorMessage can use data from the error object.\r\n * @param detector\r\n * @param getErrorMessage - a function which generates error message out of error object\r\n */\r\nexport const makeErrorFunctionInterpreter: <Output>(\r\n    detector: (error: Error) => boolean,\r\n    getErrorMessage: (error: any) => Output\r\n) => OptionalInterpreter<Error, Output> = <Output>(\r\n    detector: (e: any) => boolean,\r\n    getErrorMessage: (error: any) => Output\r\n) => (error: any): Output | undefined => {\r\n    if (detector(error)) {\r\n        return getErrorMessage(error);\r\n    }\r\n    return undefined;\r\n};\r\n\r\nexport const isNotFoundError = makeRequestErrorDetector(404);\r\nexport const notFoundErrorInterpreter = makeErrorInterpreter(isNotFoundError, { errors: [\"Not found\"] });\r\nexport const internalServerError = makeErrorInterpreter(makeRequestErrorDetector(500), { errors: [\"Internal server error\"] });\r\n\r\nexport const isAuthenticationErrorWithRedirect = makeRequestErrorDetector(401, (e: RequestError<any>) => {\r\n    return (e.data) && e.data.errors.includes('Not authenticated');\r\n});\r\n","/**\r\n * A function which takes an item and may convert it to string readable for a user or return undefined if impossible.\r\n */\r\nexport type OptionalInterpreter<T, Output> = (value: T) => Output | undefined;\r\n\r\nexport type Interpreter<T, Output> = (value: T) => Output;\r\n\r\n/**\r\n * Takes an array of interpreters and return first interpreted value\r\n * @param interpreters\r\n * @param defaultValue information about unknown error\r\n */\r\nexport const composeInterpreters = <T, Output>(\r\n    interpreters: Array<OptionalInterpreter<T, Output>>,\r\n    defaultValue: Output\r\n): Interpreter<T, Output> => (\r\n    value: T\r\n): Output => {\r\n        for (let interpreter of interpreters) {\r\n            const result = interpreter(value);\r\n            if (result) {\r\n                return result;\r\n            }\r\n        }\r\n        return defaultValue;\r\n    };\r\n","\r\nimport { CustomRequestInit, requestWithErrorHandler } from \"./request\";\r\nimport {\r\n    Errors,\r\n    internalServerError,\r\n    notFoundErrorInterpreter,\r\n    genericErrorInterpreter,\r\n    isAuthenticationErrorWithRedirect\r\n} from \"../global/model/errors\"\r\nimport { composeInterpreters } from \"../global/model/interpreter\";\r\n\r\nexport type RequestType = 'GET' | 'PUT' | 'POST' | 'DELETE';\r\n\r\nexport interface RequestProps<RequestPayload, ResponsePayload, DeserializedPayload> {\r\n    url: string;\r\n    deserialize?: (response: ResponsePayload) => DeserializedPayload;\r\n    payload?: RequestPayload;\r\n}\r\n\r\n/**\r\n * A base for a saga which makes requests\r\n */\r\nexport class Requests {\r\n\r\n    static readonly defaultHeaders: HeadersInit = {\r\n        'Content-Type': 'application/json'\r\n    };\r\n\r\n    static post<RequestPayload, ResponsePayload, DeserializedPayload>(\r\n        props: RequestProps<RequestPayload, ResponsePayload, DeserializedPayload>\r\n    ): Promise<DeserializedPayload | Errors> {\r\n        return Requests.fetch<RequestPayload, ResponsePayload, DeserializedPayload>(props.url, {\r\n            method: 'POST',\r\n            payload: props.payload\r\n        }, !(props.deserialize) ? (val => val as unknown as DeserializedPayload) : props.deserialize);\r\n    };\r\n\r\n    static put<RequestPayload, ResponsePayload, DeserializedPayload>(\r\n        props: RequestProps<RequestPayload, ResponsePayload, DeserializedPayload>\r\n    ): Promise<DeserializedPayload | Errors> {\r\n        return Requests.fetch<RequestPayload, ResponsePayload, DeserializedPayload>(props.url, {\r\n            method: 'PUT',\r\n            payload: props.payload\r\n        }, !(props.deserialize) ? (val => val as unknown as DeserializedPayload) : props.deserialize);\r\n    };\r\n\r\n    static get<ResponsePayload, DeserializedPayload>(\r\n        props: RequestProps<undefined, ResponsePayload, DeserializedPayload>\r\n    ): Promise<DeserializedPayload | Errors> {\r\n        return Requests.fetch<undefined, ResponsePayload, DeserializedPayload>(props.url, {\r\n            method: 'GET'\r\n        }, !(props.deserialize) ? (val => val as unknown as DeserializedPayload) : props.deserialize);\r\n    };\r\n\r\n    static delete<RequestPayload>(\r\n        props: RequestProps<RequestPayload, null, null>\r\n    ): Promise<null | Errors> {\r\n        return Requests.fetch<RequestPayload, null, null>(props.url, {\r\n            method: 'DELETE',\r\n            payload: props.payload\r\n        }, val => val);\r\n    };\r\n\r\n    static readonly requests: { [key: string]: (props: RequestProps<any, any, any>) => Promise<any> } = {\r\n        'GET': Requests.get,\r\n        'POST': Requests.post,\r\n        'PUT': Requests.put,\r\n        'DELETE': Requests.delete,\r\n    };\r\n\r\n    static errorPass = [isAuthenticationErrorWithRedirect];\r\n    static errorDetectors = [notFoundErrorInterpreter, internalServerError, genericErrorInterpreter];\r\n    static errorsInterpreter = composeInterpreters(Requests.errorDetectors, { errors: ['Unknown error'] });\r\n\r\n    static async fetch<SentPayload, ReceivedPayload, DeserializedPayload>(\r\n        input: RequestInfo,\r\n        init: CustomRequestInit<SentPayload>,\r\n        deserialize: (response: ReceivedPayload) => DeserializedPayload,\r\n        headers?: HeadersInit,\r\n    ): Promise<DeserializedPayload | Errors> {\r\n        return requestWithErrorHandler<SentPayload, ReceivedPayload, Errors, DeserializedPayload>(\r\n            input,\r\n            init,\r\n            Requests.errorsInterpreter,\r\n            Requests.errorPass,\r\n            deserialize,\r\n            {\r\n                ...Requests.defaultHeaders,\r\n                ...headers\r\n            }\r\n        );\r\n    }\r\n}\r\n","import { Errors } from \"../model/errors\";\r\nimport { RequestStateBase } from \"../model/state\";\r\n\r\nexport function getResourceInitialState<T>(val: RequestStateBase<T>['data']): RequestStateBase<T> {\r\n    return {\r\n        loading: false,\r\n        error: null,\r\n        data: val\r\n    };\r\n}\r\n\r\nexport class Resource<RequestPayload, ResponsePayload, State extends RequestStateBase<any>> {\r\n    constructor(\r\n        protected readonly type: string\r\n    ) { }\r\n\r\n    public readonly requestActionType = `${this.type}_REQUEST`;\r\n    public readonly errorActionType = `${this.type}_ERROR`;\r\n    public readonly responseActionType = `${this.type}_RESPONSE`;\r\n\r\n    request = (payload: RequestPayload) => {\r\n        return {\r\n            type: this.requestActionType,\r\n            payload\r\n        }\r\n    };\r\n\r\n    response = (payload: ResponsePayload) => {\r\n        return {\r\n            type: this.responseActionType,\r\n            payload\r\n        }\r\n    };\r\n\r\n    error = (error: Errors, payload?: ResponsePayload) => {\r\n        return {\r\n            type: this.errorActionType,\r\n            error,\r\n            payload\r\n        }\r\n    };\r\n\r\n    reducer = (state: State, action: any): RequestStateBase<any> => {\r\n        switch (action.type) {\r\n            case this.requestActionType:\r\n                return {\r\n                    ...state,\r\n                    loading: true\r\n                };\r\n            case this.responseActionType:\r\n                return {\r\n                    loading: false,\r\n                    data: action.payload,\r\n                    error: null\r\n                };\r\n            case this.errorActionType:\r\n                return {\r\n                    ...state,\r\n                    loading: false,\r\n                    error: [...action.error.errors],\r\n                    data: action.payload ? action.payload : state.data\r\n                };\r\n            default:\r\n                return state;\r\n        }\r\n    }\r\n}\r\n","import React, { ComponentType } from 'react';\r\nimport { Field, FieldProps } from 'formik';\r\nimport { Form } from 'react-bootstrap';\r\n\r\ninterface InputFieldProps {\r\n    size?: 'sm' | 'lg';\r\n    readOnly?: boolean;\r\n    disabled?: boolean;\r\n    type?: string,\r\n    className?: string,\r\n    autoComplete?: 'on' | 'off';\r\n\r\n    name: string,\r\n    placeholder?: string\r\n}\r\n\r\n/**\r\n * Props adapter\r\n * @param WrappedComponent\r\n */\r\nconst inputFieldAdapter = (\r\n    /**\r\n     * input control component\r\n     */\r\n    WrappedComponent: ComponentType<any>\r\n) => (\r\n    props: FieldProps<string> & InputFieldProps\r\n) => {\r\n        const { field, form, meta, ...rest } = props;\r\n        return (\r\n            <>\r\n                <WrappedComponent {...field}\r\n                    onChange={((val: any) => {\r\n                        form.setFieldValue(field.name, val.target.value, true)\r\n                    })}\r\n                    {...rest}\r\n                    isValid={form.touched[field.name] && !form.errors[field.name]}\r\n                    isInvalid={!!form.errors[field.name]}\r\n                />\r\n                <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\r\n                <Form.Control.Feedback type=\"invalid\">\r\n                    {form.errors[field.name]}\r\n                </Form.Control.Feedback>\r\n            </>\r\n        );\r\n    };\r\n\r\nconst InputAdapted = inputFieldAdapter(Form.Control);\r\n\r\n\r\nexport const InputField: React.FC<InputFieldProps> = ({ ...props }) => {\r\n\r\n    return (\r\n        <Field\r\n            {...props}\r\n            component={InputAdapted}\r\n        />\r\n    );\r\n}","import { put, takeEvery } from \"redux-saga/effects\";\r\nimport { RequestFailedAction } from \"./actions\";\r\n\r\nexport abstract class SagaBase {\r\n\r\n    abstract assignment: {\r\n        [key: string]: (action: any) => IterableIterator<any>\r\n    };\r\n\r\n    /**\r\n     * Returns an action handler with errors catching\r\n     * @param key\r\n     */\r\n    getHandler(key: string) {\r\n        function* handler(this: SagaBase, key: string, action: any): IterableIterator<any> {\r\n            try {\r\n                yield this.assignment[key](action);\r\n            } catch (e) {\r\n                alert(`${key}: ${e.message}`);\r\n                yield put({ type: \"REQUEST_FAILED\", message: e.message } as RequestFailedAction);\r\n                console.error(e);\r\n            }\r\n        }\r\n        return handler.bind(this, key);\r\n    }\r\n\r\n    /**\r\n     * Distributes actions among the assignment handlers\r\n     */\r\n    *rootSaga(): IterableIterator<any> {\r\n        for (let key of Object.keys(this.assignment)) {\r\n            yield takeEvery(key, this.getHandler(key));\r\n        }\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { UpdateToast } from \"./reducer\";\r\n\r\nexport const createToast = (header: string, body: string): UpdateToast => {\r\n    return {\r\n        type: \"UPDATE_TOAST\",\r\n        payload: {\r\n            show: true,\r\n            header: <>\r\n                <strong className=\"mr-auto\"> {header} </strong>\r\n            </>,\r\n            body: <>{body}</>\r\n        }\r\n    }\r\n}","import { call, put } from \"redux-saga/effects\";\r\nimport { Response } from \"../../../global/model/response\";\r\nimport { ItemRequestState } from \"../../../global/model/state\";\r\nimport { Requests } from \"../../../global/requests\";\r\nimport { Resource } from \"../../../global/store/request\";\r\nimport { SagaBase } from \"../../../global/store/saga-base\";\r\nimport { ProductFormModel } from \"../../../models/product\";\r\nimport { ProductModel, ProductRequestPayload } from \"../models/product\";\r\nimport { createToast } from \"../../../ui/toast/action\";\r\nimport { WithId } from \"../../../global/model/util\";\r\nimport { push } from \"connected-react-router\";\r\n\r\nexport const PRODUCT_LIST_RESOURCE = new Resource<null, ProductModel, ItemRequestState<ProductModel>>('/SCRAPE');\r\nexport const ADD_PRODUCT_RESOURCE = new Resource<ProductFormModel, Response, ItemRequestState<Response>>('/ADD_PRODUCT');\r\nexport const EDIT_PRODUCT_RESOURCE = new Resource<ProductRequestPayload, Response, ItemRequestState<Response>>('/EDIT_PRODUCT');\r\nexport const DELETE_PRODUCT_RESOURCE = new Resource<WithId<string>, Response, ItemRequestState<Response>>('/DELETE_PRODUCT');\r\n\r\nexport class ProductListSaga extends SagaBase {\r\n\r\n    assignment: {\r\n        [actionType: string]: (action: any) => IterableIterator<any>\r\n    } = {\r\n            [PRODUCT_LIST_RESOURCE.requestActionType]: this.scrape.bind,\r\n            [ADD_PRODUCT_RESOURCE.requestActionType]: this.addProduct.bind,\r\n            [EDIT_PRODUCT_RESOURCE.requestActionType]: this.editProduct.bind,\r\n            [DELETE_PRODUCT_RESOURCE.requestActionType]: this.deleteProduct.bind\r\n        };\r\n\r\n    /**\r\n     * Sends scraping request\r\n     * @param action \r\n     */\r\n    *scrape(action: ReturnType<typeof PRODUCT_LIST_RESOURCE.request>): IterableIterator<any> {\r\n        try {\r\n            const response = (yield call(Requests.get, {\r\n                url: '/scrape'\r\n            }))! as ProductModel;\r\n            yield put(PRODUCT_LIST_RESOURCE.response(response));\r\n        } catch (err) {\r\n            yield put(PRODUCT_LIST_RESOURCE.error(err));\r\n            if (err.errors.includes(\"User is not authenticated\")) {\r\n                yield put(push('/')); // Redirect to login page\r\n            }\r\n            yield put(createToast(\"Error\", err.errors.join('. ')));\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Sends Add Product request\r\n    * @param action \r\n    */\r\n    *addProduct(action: ReturnType<typeof ADD_PRODUCT_RESOURCE.request>): IterableIterator<any> {\r\n        try {\r\n            const response = (yield call(Requests.post, {\r\n                url: '/product',\r\n                payload: action.payload\r\n            }))! as Response;\r\n            yield put(ADD_PRODUCT_RESOURCE.response(response));\r\n            yield put(createToast(\"Success\", response.message.join('')));\r\n        } catch (err) {\r\n            yield put(ADD_PRODUCT_RESOURCE.error(err));\r\n            yield put(createToast(\"Error\", err.errors.join('. ')));\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Sends Edit Product request\r\n    * @param action \r\n    */\r\n    *editProduct(action: ReturnType<typeof EDIT_PRODUCT_RESOURCE.request>): IterableIterator<any> {\r\n        try {\r\n            const response = (yield call(Requests.put, {\r\n                url: '/product',\r\n                payload: action.payload\r\n            }))! as Response;\r\n            yield put(EDIT_PRODUCT_RESOURCE.response(response));\r\n            yield put(createToast(\"Success\", response.message.join('')));\r\n        } catch (err) {\r\n            yield put(EDIT_PRODUCT_RESOURCE.error(err));\r\n            yield put(createToast(\"Error\", err.errors.join('. ')));\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Sends delete Product request\r\n    * @param action \r\n    */\r\n    *deleteProduct(action: ReturnType<typeof DELETE_PRODUCT_RESOURCE.request>): IterableIterator<any> {\r\n        try {\r\n            const response = (yield call(Requests.delete, {\r\n                url: '/product',\r\n                payload: action.payload\r\n            }))! as Response;\r\n            yield put(DELETE_PRODUCT_RESOURCE.response(response));\r\n            yield put(createToast(\"Success\", response.message.join('')));\r\n        } catch (err) {\r\n            yield put(DELETE_PRODUCT_RESOURCE.error(err));\r\n            yield put(createToast(\"Error\", err.errors.join('. ')));\r\n        }\r\n    }\r\n}","import React, { useEffect } from 'react';\r\nimport { Button, Modal, Spinner } from 'react-bootstrap';\r\nimport he from \"he\";\r\nimport { ProductModel } from '../products/productList/models/product';\r\nimport { State } from \"../root/store/reducer\";\r\nimport { ItemRequestState } from '../global/model/state';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { DELETE_PRODUCT_RESOURCE } from '../products/productList/store/saga';\r\n\r\ninterface DeleteModalProps {\r\n    show: boolean,\r\n    onHide: () => void,\r\n    product?: ProductModel\r\n}\r\n\r\nexport const DeleteModal: React.FC<DeleteModalProps> = ({ product, show, onHide }) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const response = useSelector<State, ItemRequestState<Response>>(state => state.products.deletePRoduct);\r\n\r\n    async function onSubmit() {\r\n        dispatch(DELETE_PRODUCT_RESOURCE.request({\r\n            id: product!.id\r\n        }));\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!response.loading && (response.data || response.error)) {\r\n            onHide();\r\n        }\r\n    }, [response, onHide]);\r\n\r\n    return (\r\n\r\n        <Modal\r\n            show={show}\r\n            onHide={onHide}\r\n            size=\"lg\"\r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            centered\r\n        >\r\n            <Modal.Header closeButton>\r\n                <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                    {product?.alias}\r\n                </Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <h6>{product && product.productName && he.decode(product.productName)}</h6>\r\n                <h5>Are you sure, you want to remove this product ?</h5>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"danger\" type=\"submit\" disabled={response.loading} onClick={onSubmit}>\r\n                    <Spinner\r\n                        as=\"span\"\r\n                        animation=\"border\"\r\n                        size=\"sm\"\r\n                        role=\"status\"\r\n                        aria-hidden=\"true\"\r\n                        className={response.loading ? 'd-inline-block' : 'd-none'}\r\n                    />\r\n                    <span className={response.loading ? 'ml-3 d-inline-block' : 'd-none'}>Loading...</span>\r\n                    <span className={!response.loading ? 'd-inline-block' : 'd-none'}>Yes, I confirm</span>\r\n                </Button>\r\n                <Button variant=\"primary\" onClick={onHide}>No</Button>\r\n            </Modal.Footer>\r\n\r\n        </Modal>\r\n\r\n    );\r\n}","import * as yup from \"yup\";\r\n\r\nexport interface ProductFormModel {\r\n    alias: string,\r\n    url: string,\r\n    cutOffPrice: number,\r\n    imgURL: string,\r\n    portal: string\r\n}\r\n\r\nexport const ProductValidationSchema = yup.object({\r\n    alias: yup.string().required('Alias name is required'),\r\n    url: yup.string().required('Product URL is required'),\r\n    cutOffPrice: yup.string().required('Cutoff price is required').matches(/^[0-9]+$/, 'Only Numbers are supported'),\r\n    portal: yup.string().required('Portal name is required')\r\n});\r\n\r\nexport const CRONValidationSchema = yup.object({\r\n    email: yup.string().required('Email is required').email('Not a valid email address')\r\n});\r\n\r\nexport const SettingsValidationSchema = yup.object({\r\n    currentPassword: yup.string().required('Current password is required'),\r\n    newPassword: yup.string().min(8, 'Must be atleast 8 characters'),\r\n    confirmPassword: yup.string().when('newPassword', {\r\n        is: (val => val && val.trim() !== ''), then: yup.string().required('Password is required').equals([yup.ref('newPassword')], 'Passwords must match'),\r\n        otherwise: yup.string().max(0, \"Please enter new password first\")\r\n    })\r\n});\r\n\r\nexport const LoginValidationSchema = yup.object({\r\n    email: yup.string().required('Email address is required'),\r\n    password: yup.string().required('Password is required')\r\n});","import React, { ComponentType } from 'react';\r\nimport { Field, FieldProps } from 'formik';\r\nimport { Form } from 'react-bootstrap';\r\n\r\ninterface SelectFieldProps {\r\n    size?: 'sm' | 'lg';\r\n    readOnly?: boolean;\r\n    disabled?: boolean;\r\n    type?: string,\r\n    className?: string,\r\n    autocomplete?: 'on' | 'off';\r\n    options: {\r\n        key: string,\r\n        value: string\r\n    }[],\r\n    name: string,\r\n    placeholder?: string\r\n}\r\n\r\n/**\r\n * Props adapter\r\n * @param WrappedComponent\r\n */\r\nconst selectFieldAdapter = (\r\n    /**\r\n     * input control component\r\n     */\r\n    WrappedComponent: ComponentType<any>\r\n) => (\r\n    props: FieldProps<string> & SelectFieldProps\r\n) => {\r\n        const { field, form, meta, options, ...rest } = props;\r\n        return (\r\n            <WrappedComponent as=\"select\" {...field}\r\n                onChange={((val: any) => {\r\n                    form.setFieldValue(field.name, val.target.value, true)\r\n                })}\r\n                {...rest}\r\n            >\r\n                {options.map(opt => <option value={opt.key}>{opt.value}</option>)}\r\n            </WrappedComponent>\r\n        );\r\n    };\r\n\r\nconst SelectAdapted = selectFieldAdapter(Form.Control);\r\n\r\n\r\nexport const SelectField: React.FC<SelectFieldProps> = ({ ...props }) => {\r\n\r\n    return (\r\n        <Field\r\n            {...props}\r\n            component={SelectAdapted}\r\n        />\r\n    );\r\n}","import React from 'react'\r\nimport { Button, Spinner } from 'react-bootstrap';\r\n\r\ninterface ButtonSpinnerProps {\r\n    className?: string,\r\n    type?: 'submit' | 'reset',\r\n    variant?: string,\r\n    loading: boolean,\r\n    disabled: boolean,\r\n    loadingText?: string, // text displayed at the time of loading\r\n    staticText: string // default text,\r\n    onClick?: (event: any) => void\r\n}\r\n\r\nexport const ButtonSpinner: React.FC<ButtonSpinnerProps> = ({ className = '', type = 'button', variant = 'primary', loading, disabled, loadingText = 'Loading...', staticText, onClick }) => {\r\n    return (\r\n        <Button\r\n            className={className}\r\n            variant={variant}\r\n            type={type}\r\n            disabled={disabled}\r\n            style={{ cursor: disabled ? 'not-allowed' : 'pointer' }}\r\n            onClick={onClick}\r\n        >\r\n            <Spinner\r\n                as=\"span\"\r\n                animation=\"border\"\r\n                size=\"sm\"\r\n                role=\"status\"\r\n                aria-hidden=\"true\"\r\n                className={loading ? 'd-inline-block' : 'd-none'}\r\n            />\r\n            <span className={loading ? 'ml-3 d-inline-block' : 'd-none'}>{loadingText}</span>\r\n            <span className={!loading ? 'd-inline-block' : 'd-none'}>{staticText}</span>\r\n        </Button>\r\n    );\r\n}","import React, { useEffect } from 'react';\r\nimport { Button, Modal, Form } from 'react-bootstrap';\r\nimport { ProductFormModel, ProductValidationSchema } from '../models/product';\r\nimport he from \"he\";\r\nimport { Formik, Form as FormikForm } from 'formik';\r\nimport { InputField } from \"../forms/InputField\";\r\nimport { SelectField } from \"../forms/SelectField\";\r\nimport { ProductModel } from '../products/productList/models/product';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { State } from \"../root/store/reducer\";\r\nimport { ItemRequestState } from '../global/model/state';\r\nimport { EDIT_PRODUCT_RESOURCE } from '../products/productList/store/saga';\r\nimport { ButtonSpinner } from '../ui/ButtonSpinner';\r\n\r\ninterface EditModalProps {\r\n    show: boolean,\r\n    onHide: () => void,\r\n    product?: ProductModel\r\n}\r\n\r\nexport const EditModal: React.FC<EditModalProps> = ({ product, show, onHide }) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const response = useSelector<State, ItemRequestState<Response>>(state => state.products.editProduct);\r\n\r\n    async function onSubmit(updatedProduct: ProductFormModel) {\r\n        dispatch(EDIT_PRODUCT_RESOURCE.request({\r\n            ...updatedProduct,\r\n            cutOffPrice: parseInt(updatedProduct.cutOffPrice.toString().trim()),\r\n            id: product!.id\r\n        }));\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!response.loading && (response.data || response.error)) {\r\n            onHide();\r\n        }\r\n    }, [response, onHide]);\r\n\r\n    return (\r\n        <>\r\n            <Modal\r\n                show={show}\r\n                onHide={onHide}\r\n                size=\"lg\"\r\n                aria-labelledby=\"contained-modal-title-vcenter\"\r\n                centered\r\n                backdrop=\"static\"\r\n            >\r\n                <Formik<ProductFormModel>\r\n                    initialValues={{\r\n                        alias: product?.alias || '',\r\n                        url: product?.url || '',\r\n                        cutOffPrice: product?.cutOffPrice || -1,\r\n                        imgURL: product?.imgURL || '',\r\n                        portal: product?.portal || '',\r\n                    }}\r\n                    onSubmit={(product) => onSubmit(product)}\r\n                    validationSchema={ProductValidationSchema}\r\n                >{({ dirty, isValid }) =>\r\n                    <FormikForm>\r\n                        <Modal.Header closeButton>\r\n                            <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                                {product?.alias}\r\n                            </Modal.Title>\r\n                        </Modal.Header>\r\n                        <Modal.Body>\r\n                            <h6>{product && product.productName && he.decode(product.productName)}</h6>\r\n\r\n                            <Form.Group controlId=\"alias\">\r\n                                <Form.Label>Product Alias</Form.Label>\r\n                                <InputField name=\"alias\" type=\"text\" placeholder=\"Enter product alias name\" autoComplete=\"off\" />\r\n                            </Form.Group>\r\n\r\n                            <Form.Group controlId=\"productURL\">\r\n                                <Form.Label>Product URL</Form.Label>\r\n                                <InputField name=\"url\" type=\"text\" placeholder=\"Enter Product URL\" autoComplete=\"off\" />\r\n                            </Form.Group>\r\n\r\n                            <Form.Group controlId=\"cutOffPrice\">\r\n                                <Form.Label>Cut Off Price</Form.Label>\r\n                                <InputField name=\"cutOffPrice\" type=\"text\" placeholder=\"Enter Cut Off Price\" autoComplete=\"off\" />\r\n                            </Form.Group>\r\n\r\n                            <Form.Group controlId=\"imgURL\">\r\n                                <Form.Label>Image URL</Form.Label>\r\n                                <InputField name=\"imgURL\" type=\"text\" placeholder=\"Enter Image URL\" autoComplete=\"off\" />\r\n                                <Form.Text className=\"text-muted\">Not required for Amazon Products but still can pe provided to override default image</Form.Text>\r\n                            </Form.Group>\r\n\r\n                            <Form.Group controlId=\"portal\">\r\n                                <Form.Label>Portal</Form.Label>\r\n                                <SelectField options={[{ key: 'Flipkart', value: 'Flipkart' }, { key: 'Amazon', value: 'Amazon' }]} name=\"portal\" type=\"select\" placeholder=\"Enter Website Name\" />\r\n                            </Form.Group>\r\n\r\n                        </Modal.Body>\r\n                        <Modal.Footer>\r\n                            <ButtonSpinner\r\n                                type='submit'\r\n                                loading={response.loading}\r\n                                disabled={response.loading || !isValid || !dirty}\r\n                                loadingText=\"Loading...\"\r\n                                staticText=\"Update\"\r\n                            />\r\n                            <Button variant=\"secondary\" onClick={onHide}>Close</Button>\r\n                        </Modal.Footer>\r\n                    </FormikForm>}\r\n                </Formik>\r\n            </Modal>\r\n        </>\r\n    );\r\n}","import React, { useEffect } from 'react'\r\nimport { ProductFormModel, ProductValidationSchema } from '../models/product';\r\nimport { Formik, Form as FormikForm } from 'formik';\r\nimport { Button, Modal, Form } from 'react-bootstrap';\r\nimport { InputField } from '../forms/InputField';\r\nimport { SelectField } from '../forms/SelectField';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { ADD_PRODUCT_RESOURCE } from '../products/productList/store/saga';\r\nimport { State } from \"../root/store/reducer\";\r\nimport { ItemRequestState } from '../global/model/state';\r\nimport { ButtonSpinner } from '../ui/ButtonSpinner';\r\n\r\ninterface AddProductProps {\r\n    show: boolean,\r\n    onHide: () => void,\r\n}\r\n\r\nexport const AddProductModal: React.FC<AddProductProps> = ({ show, onHide }) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const response = useSelector<State, ItemRequestState<Response>>(state => state.products.addProduct)\r\n\r\n    async function onSubmit(updatedProduct: ProductFormModel) {\r\n        dispatch(ADD_PRODUCT_RESOURCE.request({\r\n            ...updatedProduct,\r\n            cutOffPrice: parseInt(updatedProduct.cutOffPrice.toString().trim()),\r\n        }));\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!response.loading && (response.data || response.error)) {\r\n            onHide();\r\n        }\r\n    }, [response, onHide]);\r\n\r\n    return (\r\n        <Modal\r\n            show={show}\r\n            onHide={onHide}\r\n            size=\"lg\"\r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            centered\r\n            backdrop=\"static\"\r\n        >\r\n            <Formik<ProductFormModel>\r\n                initialValues={{\r\n                    alias: '',\r\n                    url: '',\r\n                    cutOffPrice: 0,\r\n                    imgURL: '',\r\n                    portal: 'Flipkart',\r\n                }}\r\n                onSubmit={(product) => onSubmit(product)}\r\n                validationSchema={ProductValidationSchema}\r\n            >{({ dirty, isValid }) =>\r\n                <FormikForm>\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                            Add New product\r\n                        </Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n\r\n                        <Form.Group controlId=\"alias\">\r\n                            <Form.Label>Product Alias</Form.Label>\r\n                            <InputField name=\"alias\" type=\"text\" placeholder=\"Enter product alias name\" autoComplete=\"off\" />\r\n                        </Form.Group>\r\n\r\n                        <Form.Group controlId=\"productURL\">\r\n                            <Form.Label>Product URL</Form.Label>\r\n                            <InputField name=\"url\" type=\"text\" placeholder=\"Enter Product URL\" autoComplete=\"off\" />\r\n                        </Form.Group>\r\n\r\n                        <Form.Group controlId=\"cutOffPrice\">\r\n                            <Form.Label>Cut Off Price</Form.Label>\r\n                            <InputField name=\"cutOffPrice\" type=\"text\" placeholder=\"Enter Cut Off Price\" autoComplete=\"off\" />\r\n                        </Form.Group>\r\n\r\n                        <Form.Group controlId=\"imgURL\">\r\n                            <Form.Label>Image URL</Form.Label>\r\n                            <InputField name=\"imgURL\" type=\"text\" placeholder=\"Enter Image URL\" autoComplete=\"off\" />\r\n                            <Form.Text className=\"text-muted\">Not required for Amazon Products but still can pe provided to override default image</Form.Text>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group controlId=\"portal\">\r\n                            <Form.Label>Portal</Form.Label>\r\n                            <SelectField options={[{ key: 'Flipkart', value: 'Flipkart' }, { key: 'Amazon', value: 'Amazon' }]} name=\"portal\" type=\"select\" placeholder=\"Enter Website Name\" />\r\n                        </Form.Group>\r\n\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        <ButtonSpinner\r\n                            type='submit'\r\n                            loading={response.loading}\r\n                            disabled={response.loading || !isValid || !dirty}\r\n                            loadingText=\"Loading...\"\r\n                            staticText=\"Add Product\"\r\n                        />\r\n\r\n                        <Button variant=\"secondary\" onClick={onHide}>Close</Button>\r\n                    </Modal.Footer>\r\n                </FormikForm>}\r\n            </Formik>\r\n        </Modal>\r\n    );\r\n}","import { call, put } from \"redux-saga/effects\";\r\nimport { Response } from \"../../global/model/response\";\r\nimport { ItemRequestState } from \"../../global/model/state\";\r\nimport { Requests } from \"../../global/requests\";\r\nimport { Resource } from \"../../global/store/request\";\r\nimport { SagaBase } from \"../../global/store/saga-base\";\r\nimport { createToast } from \"../../ui/toast/action\";\r\nimport { CronJobRequestModal, CronStatusResponse } from \"../models/cron\";\r\nimport { history } from \"../../index\";\r\nimport { push } from \"connected-react-router\";\r\n\r\nexport const CRON_STATUS_RESOURCE = new Resource<null, CronStatusResponse, ItemRequestState<CronStatusResponse>>('/CRON/STATUS');\r\nexport const CRON_START_RESOURCE = new Resource<CronJobRequestModal, Response, ItemRequestState<Response>>('/CRON/START');\r\nexport const CRON_STOP_RESOURCE = new Resource<null, Response, ItemRequestState<Response>>('/CRON/STOP');\r\n\r\nexport class CronJobsSaga extends SagaBase {\r\n\r\n    assignment: {\r\n        [actionType: string]: (action: any) => IterableIterator<any>\r\n    } = {\r\n            [CRON_STATUS_RESOURCE.requestActionType]: this.status,\r\n            [CRON_START_RESOURCE.requestActionType]: this.startJob,\r\n            [CRON_STOP_RESOURCE.requestActionType]: this.stopJob\r\n        };\r\n\r\n    /**\r\n     * Sends cron status request\r\n     * @param action \r\n     */\r\n    *status(action: ReturnType<typeof CRON_STATUS_RESOURCE.request>): IterableIterator<any> {\r\n        try {\r\n            const response = (yield call(Requests.get, {\r\n                url: '/cron/status'\r\n            }))! as CronStatusResponse;\r\n            yield put(CRON_STATUS_RESOURCE.response(response));\r\n            const url = history.location.pathname;\r\n            // Redirect to Product List page when already logged in and not present on list page\r\n            if (url !== '/productList')\r\n                yield put(push('/productList'));\r\n        } catch (err) {\r\n            yield put(CRON_STATUS_RESOURCE.error(err));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sends cron job start request\r\n     * @param action \r\n     */\r\n    *startJob(action: ReturnType<typeof CRON_START_RESOURCE.request>): IterableIterator<any> {\r\n        try {\r\n            const response = (yield call(Requests.post, {\r\n                url: '/cron/start',\r\n                payload: action.payload\r\n            }))! as Response;\r\n            yield put(CRON_START_RESOURCE.response(response));\r\n            yield put(createToast(\"Success\", response.message.join('')));\r\n        } catch (err) {\r\n            yield put(CRON_START_RESOURCE.error(err));\r\n            yield put(createToast(\"Error\", err.errors.join('. ')));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sends cron job stop request\r\n     * @param action \r\n     */\r\n    *stopJob(action: ReturnType<typeof CRON_START_RESOURCE.request>): IterableIterator<any> {\r\n        try {\r\n            const response = (yield call(Requests.post, {\r\n                url: '/cron/stop'\r\n            }))! as Response;\r\n            yield put(CRON_STOP_RESOURCE.response(response));\r\n            yield put(createToast(\"Success\", response.message.join('')));\r\n        } catch (err) {\r\n            yield put(CRON_STOP_RESOURCE.error(err));\r\n            yield put(createToast(\"Error\", err.errors.join('. ')));\r\n        }\r\n    }\r\n}","import React, { useEffect } from 'react'\r\nimport { Formik, Form as FormikForm } from 'formik';\r\nimport { Button, Modal, Form, Col, Row, Container } from 'react-bootstrap';\r\nimport { InputField } from '../forms/InputField';\r\nimport { SelectField } from '../forms/SelectField';\r\nimport { CRONValidationSchema } from '../models/product';\r\nimport { ButtonSpinner } from \"../ui/ButtonSpinner\";\r\nimport { CronJobRequestModal, CronStatusResponse } from './models/cron';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { State } from \"../root/store/reducer\";\r\nimport { ItemRequestState } from '../global/model/state';\r\nimport { CRON_START_RESOURCE, CRON_STATUS_RESOURCE, CRON_STOP_RESOURCE } from './store/saga';\r\nimport { Response } from '../global/model/response';\r\n\r\ninterface CronJobModalProps {\r\n    show: boolean,\r\n    onHide: () => void,\r\n}\r\n\r\nexport const CronJobModal: React.FC<CronJobModalProps> = ({ show, onHide }) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const cronStatusResponse = useSelector<State, ItemRequestState<CronStatusResponse>>(state => state.cron.status);\r\n    const cronStartResponse = useSelector<State, ItemRequestState<Response>>(state => state.cron.startJob);\r\n    const cronStopResponse = useSelector<State, ItemRequestState<Response>>(state => state.cron.stopJob);\r\n\r\n    // Fetches any running cron job status\r\n    useEffect(() => {\r\n        dispatch(CRON_STATUS_RESOURCE.request(null));\r\n    }, [dispatch]);\r\n\r\n    // Starts or Restarts a new Cron Job\r\n    async function onStart(cron: CronJobRequestModal) {\r\n        dispatch(CRON_START_RESOURCE.request(cron));\r\n    }\r\n\r\n    // Stops any running cron job\r\n    async function onStop() {\r\n        dispatch(CRON_STOP_RESOURCE.request(null));\r\n    }\r\n\r\n    useEffect(() => {\r\n        if ((!cronStartResponse.loading && (cronStartResponse.data || cronStartResponse.error))\r\n            || (!cronStopResponse.loading && (cronStopResponse.data || cronStopResponse.error))) {\r\n            onHide();\r\n        }\r\n    }, [cronStartResponse, cronStopResponse, onHide]);\r\n\r\n    return (\r\n        <Modal\r\n            show={show}\r\n            onHide={onHide}\r\n            size=\"lg\"\r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            centered\r\n            backdrop=\"static\"\r\n        >\r\n            <Formik<CronJobRequestModal>\r\n                initialValues={{\r\n                    email: cronStatusResponse.data?.email || '',\r\n                    hour: \"1day\"\r\n                }}\r\n                onSubmit={(cron) => {\r\n                    console.log('updating cron job', cron);\r\n                    onStart(cron);\r\n                }}\r\n                validationSchema={CRONValidationSchema}\r\n                enableReinitialize={true}\r\n            >{({ dirty, isValid }) =>\r\n                <FormikForm>\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                            Manage CRON Jobs\r\n                        </Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n\r\n                        <Form.Group controlId=\"email\">\r\n                            <Form.Label>Email</Form.Label>\r\n                            <InputField name=\"email\" type=\"email\" placeholder=\"Enter Your email\" autoComplete=\"off\" />\r\n                        </Form.Group>\r\n\r\n                        <Form.Group controlId=\"frequency\">\r\n                            <Form.Label>Email frequency</Form.Label>\r\n                            <SelectField options={[\r\n                                { key: '15min', value: 'Every 15 minutes' },\r\n                                { key: '30min', value: 'Every 30 minutes' },\r\n                                { key: '1hr', value: 'Every 1 hour' },\r\n                                { key: '2hr', value: 'Every 2 hours' },\r\n                                { key: '4hr', value: 'Every 4 hours' },\r\n                                { key: '6hr', value: 'Every 6 hours' },\r\n                                { key: '8hr', value: 'Every 8 hours' },\r\n                                { key: '12hr', value: 'Every 12 hours' },\r\n                                { key: '1day', value: 'Every day' },\r\n                                { key: '1week', value: 'Every week' },\r\n                                { key: '1month', value: 'Every month' },\r\n                            ]} name=\"hour\" type=\"select\" placeholder=\"Enter E-mail frequency\" />\r\n                        </Form.Group>\r\n                        Cron Job Status: {cronStatusResponse.data?.status === \"Running\" ? <span className='text-success'>Running once every {cronStatusResponse.data?.cronFrequency}</span> : <span className='text-danger'>Not Running</span>}\r\n\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Container fluid>\r\n                            <Row>\r\n                                <Col md={12} lg={5} className='pl-0 d-sm-flex'>\r\n                                    <ButtonSpinner variant=\"danger\" onClick={onStop} loading={cronStopResponse.loading} disabled={cronStopResponse.loading || !isValid} staticText=\"Stop CRON Job\" loadingText=\"Stopping..\" />\r\n                                </Col>\r\n                                <Col md={12} lg={3}><div className='d-sm-block d-lg-none' style={{ height: '.5rem' }}></div></Col>\r\n                                <Col md={12} lg={4} className='pr-0 d-flex justify-content-center justify-content-lg-end'>\r\n                                    <ButtonSpinner type=\"submit\" loading={cronStartResponse.loading} disabled={cronStartResponse.loading || !isValid} staticText=\"Start CRON Job\" loadingText=\"Starting..\" />\r\n                                    <Button variant=\"secondary\" className='ml-2' onClick={onHide}>Close</Button>\r\n                                </Col>\r\n                            </Row>\r\n                        </Container>\r\n                    </Modal.Footer>\r\n                </FormikForm>}\r\n            </Formik>\r\n        </Modal>\r\n    );\r\n}","import { ItemRequestState } from \"../../global/model/state\";\r\nimport { Requests } from \"../../global/requests\";\r\nimport { Resource } from \"../../global/store/request\";\r\nimport { SagaBase } from \"../../global/store/saga-base\";\r\nimport { LoginModel, SettingsModel } from \"../models/UserModel\";\r\nimport { call, put } from \"redux-saga/effects\";\r\nimport { Response } from \"../../global/model/response\";\r\nimport { createToast } from \"../../ui/toast/action\";\r\nimport { push } from \"connected-react-router\";\r\n\r\nexport const LOGIN_RESOURCE = new Resource<LoginModel, Response, ItemRequestState<Response>>('USER/LOGIN');\r\nexport const CHANGE_PASSWORD_RESOURCE = new Resource<SettingsModel, Response, ItemRequestState<Response>>('USER/CHANGE');\r\nexport const LOGOUT_RESOURCE = new Resource<null, Response, ItemRequestState<Response>>('USER/LOGOUT');\r\n\r\nexport class UserSaga extends SagaBase {\r\n\r\n    assignment: {\r\n        [actionType: string]: (action: any) => IterableIterator<any>\r\n    } = {\r\n            [LOGIN_RESOURCE.requestActionType]: this.login,\r\n            [CHANGE_PASSWORD_RESOURCE.requestActionType]: this.changePassword,\r\n            [LOGOUT_RESOURCE.requestActionType]: this.logout\r\n        };\r\n\r\n    /**\r\n     * Sends Login Request\r\n     * @param action \r\n     */\r\n    *login(action: ReturnType<typeof LOGIN_RESOURCE.request>): IterableIterator<any> {\r\n        try {\r\n            const response = (yield call(Requests.post, {\r\n                url: `/user/login`,\r\n                payload: action.payload\r\n            }))! as Response;\r\n            yield put(LOGIN_RESOURCE.response(response));\r\n            yield put(createToast(\"Success\", response.message.join('')));\r\n            yield put(push('/productList'));\r\n        } catch (err) {\r\n            yield put(LOGIN_RESOURCE.error(err));\r\n            yield put(createToast(\"Error\", err.errors.join('. ')));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sends Change Password Request\r\n     * @param action \r\n     */\r\n    *changePassword(action: ReturnType<typeof CHANGE_PASSWORD_RESOURCE.request>): IterableIterator<any> {\r\n        try {\r\n            const response = (yield call(Requests.put, {\r\n                url: `/user/change`,\r\n                payload: action.payload\r\n            }))! as Response;\r\n            yield put(CHANGE_PASSWORD_RESOURCE.response(response));\r\n            yield put(createToast(\"Success\", response.message.join('')));\r\n        } catch (err) {\r\n            yield put(CHANGE_PASSWORD_RESOURCE.error(err));\r\n            yield put(createToast(\"Error\", err.errors.join('. ')));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sends Logout Request\r\n     * @param action \r\n     */\r\n    *logout(action: ReturnType<typeof LOGOUT_RESOURCE.request>): IterableIterator<any> {\r\n        try {\r\n            const response = (yield call(Requests.post, {\r\n                url: `/user/logout`\r\n            }))! as Response;\r\n            yield put(LOGOUT_RESOURCE.response(response));\r\n            if (response.message.includes(\"Logout Successful !!\")) {\r\n                yield put(push('/'));\r\n            }\r\n            yield put(createToast(\"Success\", response.message.join('')));\r\n        } catch (err) {\r\n            yield put(LOGOUT_RESOURCE.error(err));\r\n            yield put(createToast(\"Error\", err.errors.join('. ')));\r\n        }\r\n    }\r\n}","import React, { useEffect } from 'react';\r\nimport { Button, Modal, Form } from 'react-bootstrap';\r\nimport { Formik, Form as FormikForm } from 'formik';\r\nimport { InputField } from \"../forms/InputField\";\r\nimport { ButtonSpinner } from \"../ui/ButtonSpinner\";\r\nimport { SettingsValidationSchema } from '../models/product';\r\nimport { State } from \"../root/store/reducer\";\r\nimport { ItemRequestState } from '../global/model/state';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Response } from '../global/model/response';\r\nimport { CHANGE_PASSWORD_RESOURCE } from '../login/store/saga';\r\n\r\n\r\ninterface SettingsModalProps {\r\n    show: boolean,\r\n    onHide: () => void,\r\n}\r\n\r\ninterface SettingsFormModal {\r\n    currentPassword: string,\r\n    newPassword: string,\r\n    confirmPassword: string\r\n}\r\n\r\nexport const SettingsModal: React.FC<SettingsModalProps> = ({ show, onHide }) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const response = useSelector<State, ItemRequestState<Response>>(state => state.user.changePassword);\r\n\r\n    async function onSubmit(user: Pick<SettingsFormModal, \"currentPassword\" | \"newPassword\">) {\r\n        dispatch(CHANGE_PASSWORD_RESOURCE.request(user));\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!response.loading && (response.data || response.error)) {\r\n            onHide();\r\n        }\r\n    }, [response, onHide]);\r\n\r\n    return (\r\n        <>\r\n            <Modal\r\n                show={show}\r\n                onHide={onHide}\r\n                size=\"lg\"\r\n                aria-labelledby=\"contained-modal-title-vcenter\"\r\n                centered\r\n                backdrop=\"static\"\r\n            >\r\n                <Formik<SettingsFormModal>\r\n                    initialValues={{\r\n                        currentPassword: '',\r\n                        newPassword: '',\r\n                        confirmPassword: ''\r\n                    }}\r\n                    onSubmit={(settings) => onSubmit({ currentPassword: settings.currentPassword, newPassword: settings.newPassword })}\r\n                    validationSchema={SettingsValidationSchema}\r\n                >{({ dirty, isValid }) =>\r\n                    <FormikForm>\r\n                        <Modal.Header closeButton>\r\n                            <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                                Change Account Settings\r\n                            </Modal.Title>\r\n                        </Modal.Header>\r\n                        <Modal.Body>\r\n\r\n                            <Form.Group controlId=\"currentPassword\">\r\n                                <Form.Label>Current Password</Form.Label>\r\n                                <InputField name=\"currentPassword\" type=\"password\" placeholder=\"Please enter current password\" autoComplete=\"off\" />\r\n                            </Form.Group>\r\n\r\n                            <Form.Group controlId=\"newPassword\">\r\n                                <Form.Label>New Password</Form.Label>\r\n                                <InputField name=\"newPassword\" type=\"password\" placeholder=\"Please enter new password\" autoComplete=\"off\" />\r\n                            </Form.Group>\r\n\r\n                            <Form.Group controlId=\"confirmPassword\">\r\n                                <Form.Label>Confirm Password</Form.Label>\r\n                                <InputField name=\"confirmPassword\" type=\"password\" placeholder=\"Please enter same password again\" autoComplete=\"off\" />\r\n                            </Form.Group>\r\n\r\n                        </Modal.Body>\r\n                        <Modal.Footer>\r\n                            <ButtonSpinner\r\n                                type='submit'\r\n                                loading={response.loading}\r\n                                disabled={response.loading || !isValid || !dirty}\r\n                                loadingText='Changing..'\r\n                                staticText=\"Submit\"\r\n                            />\r\n                            <Button variant=\"secondary\" onClick={onHide}>Close</Button>\r\n                        </Modal.Footer>\r\n                    </FormikForm>}\r\n                </Formik>\r\n            </Modal>\r\n        </>\r\n    );\r\n}","import React, { useState } from 'react'\r\nimport { Nav, Navbar } from 'react-bootstrap';\r\nimport { AddProductModal } from \"../modal/AddProductModal\";\r\nimport { CronJobModal } from \"../cron/CronJobModal\";\r\nimport { SettingsModal } from '../modal/SettingsModal';\r\nimport { LOGOUT_RESOURCE } from '../login/store/saga';\r\nimport { useDispatch } from 'react-redux';\r\n\r\ninterface NavigationProps { }\r\n\r\nexport const Navigation: React.FC<NavigationProps> = () => {\r\n    const [addProduct, setAddProduct] = useState<boolean>(false);\r\n    const [cronJob, setCronJob] = useState<boolean>(false);\r\n    const [settings, setSettings] = useState<boolean>(false);\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <>\r\n            <Navbar bg=\"dark\" variant=\"dark\" fixed=\"top\" expand=\"md\">\r\n                <Navbar.Brand href=\"#home\">Price Checker</Navbar.Brand>\r\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                    <Nav className=\"ml-auto\">\r\n                        <Nav.Link href=\"#home\">Home</Nav.Link>\r\n                        <Nav.Link href=\"#addProduct\" onClick={() => setAddProduct(true)}>Add Product</Nav.Link>\r\n                        <Nav.Link href=\"#cronJobs\" onClick={() => setCronJob(true)}>CRON Jobs</Nav.Link>\r\n                        <Nav.Link href=\"#settings\" onClick={() => setSettings(true)}>Settings</Nav.Link>\r\n                        <Nav.Link href=\"#logout\" onClick={() => dispatch(LOGOUT_RESOURCE.request(null))} >Log out</Nav.Link>\r\n                    </Nav>\r\n                </Navbar.Collapse>\r\n            </Navbar>\r\n            <AddProductModal show={addProduct} onHide={() => { setAddProduct(false) }} />\r\n            <CronJobModal show={cronJob} onHide={() => { setCronJob(false) }} />\r\n            <SettingsModal show={settings} onHide={() => { setSettings(false) }} />\r\n        </>\r\n    );\r\n}","import React from 'react'\r\nimport { CubeSpinner } from \"react-spinners-kit\";\r\n\r\ninterface SpinnerProps {\r\n    size?: number;\r\n    loading: boolean;\r\n    frontColor: string\r\n}\r\n\r\nexport const Spinner: React.FC<SpinnerProps> = (props) => {\r\n    return (\r\n        <div style={{ height: '80vh' }} className={props.loading ? 'd-flex justify-content-center align-items-center flex-column' : 'd-none'}>\r\n            <CubeSpinner {...props} />\r\n            <div className={props.loading ? 'mt-5' : 'd-none'}>\r\n                <h5> Loading your Products. Please wait...</h5>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n}","export default __webpack_public_path__ + \"static/media/not-available.f227f124.png\";","import React from 'react'\r\nimport { Button, Card } from 'react-bootstrap';\r\nimport he from \"he\";\r\nimport { ProductModel } from './productList/models/product';\r\nimport noImage from \"../images/not-available.png\";\r\n\r\ninterface productProps extends ProductModel {\r\n    setEditModal: React.Dispatch<React.SetStateAction<string | null>>;\r\n    setDeleteModal: React.Dispatch<React.SetStateAction<string | null>>;\r\n}\r\n\r\n// const IMG_NOTAVAILABLE = 'https://images.squarespace-cdn.com/content/v1/578988fe46c3c4caeebf9a64/1519166675314-L19694E63MJHS3P3BNUV/ke17ZwdGBToddI8pDm48kAf-OpKpNsh_OjjU8JOdDKBZw-zPPgdn4jUwVcJE1ZvWQUxwkmyExglNqGp0IvTJZUJFbgE-7XRK3dMEBRBhUpwkCFOLgzJj4yIx-vIIEbyWWRd0QUGL6lY_wBICnBy59Ye9GKQq6_hlXZJyaybXpCc/sorry-image-not-available.png'\r\n\r\nexport const Product: React.FC<productProps> = (product) => {\r\n    const imgURL = product.imgURL || noImage;\r\n    return (\r\n        <Card style={{ minWidth: '18rem' }} className='h-100'>\r\n            <Card.Img variant=\"top\" src={imgURL} />\r\n            <Card.Body className='d-flex flex-column justify-content-end'>\r\n                <Card.Title>{product.alias}</Card.Title>\r\n                {product && product.productName && <Card.Subtitle className='mt-2 mb-2'>{he.decode(product.productName)}</Card.Subtitle>}\r\n                <Card.Text className='mt-4'>\r\n                    Website: {product.portal} <br />\r\n                    Current Price: <b>₹{product.price}</b> <br />\r\n                    Cut Off Price: ₹{product.cutOffPrice} <br />\r\n                </Card.Text>\r\n\r\n                <div className='d-flex justify-content-between'>\r\n                    <Button variant=\"primary\" onClick={() => window.open(product.url, '_blank')!.focus()}>Buy Now !</Button>\r\n                    <div className='d-inline-flex justify-content-end'>\r\n                        <Button variant=\"secondary\" onClick={() => product.setEditModal(product.id)}>Edit</Button>\r\n                        <Button className='ml-1' variant=\"danger\" onClick={() => product.setDeleteModal(product.id)}>Delete</Button>\r\n                    </div>\r\n                </div>\r\n            </Card.Body>\r\n        </Card>);\r\n}","import React, { useEffect, useState } from 'react';\r\nimport { CardDeck, Col, Container } from 'react-bootstrap';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport { DeleteModal } from '../../modal/DeleteModal';\r\nimport { EditModal } from '../../modal/EditModal';\r\nimport { Navigation } from '../../Navbar/Navigation';\r\nimport { Spinner } from \"../../ui/Spinner\";\r\nimport { Product } from \"../product\";\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { State } from \"../../root/store/reducer\";\r\nimport { ProductModel } from './models/product';\r\nimport { PRODUCT_LIST_RESOURCE } from './store/saga';\r\nimport { ItemRequestState } from '../../global/model/state';\r\n\r\ninterface ProductListProps extends RouteComponentProps { }\r\n\r\nexport const ProductList: React.FC<ProductListProps> = (props) => {\r\n    const [selectedProduct, setSelectedProduct] = useState<string | null>(null);\r\n    const [delectProduct, setDeleteProduct] = useState<string | null>(null);\r\n    const dispatch = useDispatch();\r\n    const response = useSelector<State, ItemRequestState<ProductModel[]>>(state => state.products.list);\r\n\r\n    useEffect(() => {\r\n        dispatch(PRODUCT_LIST_RESOURCE.request(null))\r\n    }, [dispatch]);\r\n\r\n    return (\r\n        <>\r\n            <Navigation />\r\n            <div className='mb-4' style={{ marginTop: '5rem' }}>\r\n                {response.data && <Container>\r\n                    <h1 className='mb-2 pl-1'>Product List</h1>\r\n                    <CardDeck>\r\n                        {response.data.map(product =>\r\n                            <Col lg=\"4\" className='mt-4' key={product.id}>\r\n                                <Product {...product} setEditModal={setSelectedProduct} setDeleteModal={setDeleteProduct} />\r\n                            </Col>\r\n                        )}\r\n                    </CardDeck>\r\n                </Container>}\r\n                <Spinner loading={response.loading ? true : false} frontColor='#4A90E2' size={120} />\r\n                <EditModal show={selectedProduct ? true : false} onHide={() => { setSelectedProduct(null) }} product={response.data?.find(product => product.id === selectedProduct)} />\r\n                <DeleteModal show={delectProduct ? true : false} onHide={() => { setDeleteProduct(null) }} product={response.data?.find(product => product.id === delectProduct)} />\r\n            </div>\r\n        </>\r\n    );\r\n}","import { ToastState } from './model';\r\n\r\nexport interface UpdateToast {\r\n    type: 'UPDATE_TOAST',\r\n    payload: ToastState\r\n}\r\n\r\nexport const initialState = {\r\n    show: false,\r\n    header: null,\r\n    body: null,\r\n    autohide: true,\r\n    minHeight: '100px',\r\n    top: '5rem',\r\n    right: '5rem',\r\n    delay: 5000\r\n}\r\n\r\nexport const reducer = (state: ToastState = initialState, action: UpdateToast): ToastState => {\r\n    switch (action.type) {\r\n        case \"UPDATE_TOAST\":\r\n            return { ...state, ...action.payload }\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react'\r\nimport { Toast as BootstrapToast } from \"react-bootstrap\";\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { State } from \"../../root/store/reducer\";\r\nimport { ToastState } from './model';\r\nimport { initialState } from \"./reducer\";\r\n\r\ninterface toastProps { }\r\n\r\nexport const Toast: React.FC<toastProps> = () => {\r\n    const data = useSelector<State, ToastState>(state => state.toast);\r\n    const dispatch = useDispatch();\r\n    return (\r\n        <BootstrapToast\r\n            style={{\r\n                position: 'fixed',\r\n                top: data.top,\r\n                right: data.right,\r\n                zIndex: 10\r\n            }}\r\n            show={data.show}\r\n            autohide={data.autohide}\r\n            onClose={() => dispatch({\r\n                type: 'UPDATE_TOAST',\r\n                payload: initialState\r\n            })}\r\n            delay={data.delay}\r\n        >\r\n            <BootstrapToast.Header>\r\n                {data.header}\r\n            </BootstrapToast.Header>\r\n            <BootstrapToast.Body>{data.body}</BootstrapToast.Body>\r\n        </BootstrapToast>\r\n    );\r\n}","import React, { useEffect } from 'react';\r\nimport { Formik, Form as FormikForm } from 'formik';\r\nimport { InputField } from \"../forms/InputField\";\r\nimport { Form } from 'react-bootstrap';\r\nimport { ButtonSpinner } from '../ui/ButtonSpinner';\r\nimport { LoginValidationSchema } from \"../models/product\";\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { LOGIN_RESOURCE } from './store/saga';\r\nimport { State } from \"../root/store/reducer\";\r\nimport { ItemRequestState } from '../global/model/state';\r\nimport './login.scss';\r\nimport { Response } from '../global/model/response';\r\nimport { CRON_STATUS_RESOURCE } from '../cron/store/saga';\r\n\r\n\r\ninterface loginProps extends RouteComponentProps { }\r\n\r\ninterface LoginFormModel {\r\n    email: string,\r\n    password: string\r\n}\r\n\r\nexport const Login: React.FC<loginProps> = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const response = useSelector<State, ItemRequestState<Response>>(state => state.user.login);\r\n\r\n    // Redirect to Product List page when already logged in and not present on product list page\r\n    useEffect(() => {\r\n        dispatch(CRON_STATUS_RESOURCE.request(null));\r\n    }, [dispatch])\r\n\r\n    async function onSubmit(user: LoginFormModel) {\r\n        dispatch(LOGIN_RESOURCE.request(user));\r\n    }\r\n\r\n    return (\r\n        <div id=\"cover\" className=\"min-vh-100\">\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-xl-5 col-lg-6 col-md-8 col-sm-10 col-xs-2 mx-auto form p-4\" style={{ zIndex: 1 }}>\r\n                        <Formik<LoginFormModel>\r\n                            initialValues={{\r\n                                email: '',\r\n                                password: ''\r\n                            }}\r\n                            onSubmit={(user) => onSubmit(user)}\r\n                            validationSchema={LoginValidationSchema}\r\n                        >{({ dirty, isValid }) =>\r\n                            <FormikForm>\r\n                                <h4 className='pt-1 pb-3'>Sign In</h4>\r\n\r\n                                <Form.Group controlId=\"email\">\r\n                                    <InputField name=\"email\" type=\"text\" placeholder=\"Enter email address\" autoComplete=\"off\" />\r\n                                </Form.Group>\r\n\r\n                                <Form.Group controlId=\"password\">\r\n                                    <InputField name=\"password\" type=\"password\" placeholder=\"Enter password\" autoComplete=\"off\" />\r\n                                </Form.Group>\r\n\r\n                                <ButtonSpinner\r\n                                    type='submit'\r\n                                    loading={response.loading}\r\n                                    disabled={response.loading || !isValid || !dirty}\r\n                                    loadingText='Logging in..'\r\n                                    staticText=\"Login\"\r\n                                />\r\n                            </FormikForm>\r\n                            }\r\n                        </Formik>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React from 'react';\nimport './App.scss';\nimport { ProductList } from './products/productList/productList';\nimport { Toast } from \"./ui/toast/toast\";\nimport { Switch, Route } from 'react-router-dom';\nimport { Login } from './login/login';\n\nfunction App() {\n  return (\n    <>\n      <Toast />\n      <Switch>\n        <Route path='/productList' component={ProductList} />\n        <Route path='/' component={Login} />\n      </Switch>\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import { Action, AnyAction, Reducer } from \"redux\";\r\n\r\nexport type SimplifiedReducer<State, Action> = (state: State, action: Action) => State;\r\nexport type SimplifiedReducersMapObject<S> = { [key in keyof S]: SimplifiedReducer<S[key], any> };\r\n\r\n/**\r\n * A wrapper to handle undefined state for a SimplifiedReducer, so that it matches standard redux's Reducer\r\n * @param reducer\r\n * @param initialState\r\n */\r\nexport function handleUndefinedState<State, Action extends AnyAction>(\r\n    reducer: SimplifiedReducer<State, Action>,\r\n    initialState: State\r\n): Reducer<State, Action> {\r\n    return (state: State | undefined, action: Action) => {\r\n        if (!state) {\r\n            return initialState;\r\n        }\r\n        return reducer(state, action);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * This combines simplified reducers like the normal combine method to another simplified reducer\r\n * @param reducers\r\n */\r\nexport function combineSimplyfiedReducers<S, A extends Action<any>>(\r\n    reducers: SimplifiedReducersMapObject<Partial<S>>\r\n): SimplifiedReducer<S, A> {\r\n    return (state: S, action: A) => ({\r\n        ...state,\r\n        ...Object.keys(reducers).reduce<{ [key: string]: any }>((acc, key: string) => {\r\n            acc[key] = reducers[key as keyof S](state[key as keyof S], action);\r\n            return acc;\r\n        }, {}) as SimplifiedReducersMapObject<S>\r\n    });\r\n}\r\n\r\n/**\r\n * Add reducers to make both operate on the same store key\r\n * @param reducers\r\n */\r\nexport function addReducers<S, A extends Action<any>>(reducers: SimplifiedReducer<S, A>[]): SimplifiedReducer<S, A> {\r\n    return reducers.reduce((prev: SimplifiedReducer<S, A>, reducer: SimplifiedReducer<S, A>) => {\r\n        return (state: S, action: A) => reducer(prev(state, action), action);\r\n    }, (state: S, action: A) => state);\r\n}\r\n","import { CHANGE_PASSWORD_RESOURCE, LOGIN_RESOURCE, LOGOUT_RESOURCE } from \"./saga\";\r\nimport { ItemRequestState } from \"../../global/model/state\";\r\nimport { getResourceInitialState, } from \"../../global/store/request\";\r\nimport { handleUndefinedState, addReducers, combineSimplyfiedReducers } from \"../../global/store/reducer\";\r\nimport { AnyAction } from \"redux\"\r\nimport { Response } from \"../../global/model/response\";\r\n\r\n\r\nexport interface State {\r\n    login: ItemRequestState<Response>;\r\n    changePassword: ItemRequestState<Response>;\r\n    logout: ItemRequestState<Response>\r\n}\r\n\r\nexport const initialState: State = {\r\n    login: getResourceInitialState(null),\r\n    changePassword: getResourceInitialState(null),\r\n    logout: getResourceInitialState(null)\r\n};\r\n\r\nexport const reducer = handleUndefinedState(\r\n    addReducers([\r\n        combineSimplyfiedReducers<State, AnyAction>({\r\n            // @ts-ignore\r\n            login: LOGIN_RESOURCE.reducer,\r\n            // @ts-ignore\r\n            changePassword: CHANGE_PASSWORD_RESOURCE.reducer,\r\n            // @ts-ignore\r\n            logout: LOGOUT_RESOURCE.reducer,\r\n        })\r\n    ]),\r\n    initialState\r\n);","import { AnyAction } from \"redux\"\r\nimport { ItemRequestState } from \"../../../global/model/state\";\r\nimport { addReducers, combineSimplyfiedReducers, handleUndefinedState } from \"../../../global/store/reducer\";\r\nimport { getResourceInitialState } from \"../../../global/store/request\";\r\nimport { ProductModel } from \"../models/product\";\r\nimport { ADD_PRODUCT_RESOURCE, DELETE_PRODUCT_RESOURCE, EDIT_PRODUCT_RESOURCE, PRODUCT_LIST_RESOURCE } from \"./saga\";\r\n\r\n\r\nexport interface State {\r\n    list: ItemRequestState<ProductModel[]>;\r\n    addProduct: ItemRequestState<Response>;\r\n    editProduct: ItemRequestState<Response>;\r\n    deletePRoduct: ItemRequestState<Response>;\r\n}\r\n\r\nexport const initialState: State = {\r\n    list: getResourceInitialState(null),\r\n    addProduct: getResourceInitialState(null),\r\n    editProduct: getResourceInitialState(null),\r\n    deletePRoduct: getResourceInitialState(null)\r\n};\r\n\r\nexport const reducer = handleUndefinedState(\r\n    addReducers([\r\n        combineSimplyfiedReducers<State, AnyAction>({\r\n            // @ts-ignore\r\n            list: PRODUCT_LIST_RESOURCE.reducer,\r\n            // @ts-ignore\r\n            addProduct: ADD_PRODUCT_RESOURCE.reducer,\r\n            // @ts-ignore\r\n            editProduct: EDIT_PRODUCT_RESOURCE.reducer,\r\n            // @ts-ignore\r\n            deletePRoduct: DELETE_PRODUCT_RESOURCE.reducer,\r\n        })\r\n    ]),\r\n    initialState\r\n);","import { AnyAction } from \"redux\"\r\nimport { ItemRequestState } from \"../../global/model/state\";\r\nimport { CRON_START_RESOURCE, CRON_STATUS_RESOURCE, CRON_STOP_RESOURCE } from \"./saga\";\r\nimport { CronStatusResponse } from \"../models/cron\";\r\nimport { getResourceInitialState } from \"../../global/store/request\";\r\nimport { addReducers, combineSimplyfiedReducers, handleUndefinedState } from \"../../global/store/reducer\";\r\nimport { Response } from \"../../global/model/response\";\r\n\r\n\r\nexport interface State {\r\n    status: ItemRequestState<CronStatusResponse>;\r\n    startJob: ItemRequestState<Response>;\r\n    stopJob: ItemRequestState<Response>\r\n}\r\n\r\nexport const initialState: State = {\r\n    status: getResourceInitialState(null),\r\n    startJob: getResourceInitialState(null),\r\n    stopJob: getResourceInitialState(null),\r\n};\r\n\r\nexport const reducer = handleUndefinedState(\r\n    addReducers([\r\n        combineSimplyfiedReducers<State, AnyAction>({\r\n            // @ts-ignore\r\n            status: CRON_STATUS_RESOURCE.reducer,\r\n            // @ts-ignore\r\n            startJob: CRON_START_RESOURCE.reducer,\r\n            // @ts-ignore\r\n            stopJob: CRON_STOP_RESOURCE.reducer,\r\n        })\r\n    ]),\r\n    initialState\r\n);","import { Action, combineReducers, Reducer } from \"redux\";\r\nimport { connectRouter, RouterState } from 'connected-react-router';\r\nimport * as User from \"../../login/store/reducer\"\r\nimport { History } from \"history\";\r\nimport { ToastState } from \"../../ui/toast/model\";\r\nimport * as Toast from \"../../ui/toast/reducer\";\r\nimport * as ProductList from \"../../products/productList/store/reducer\";\r\nimport * as Cron from \"../../cron/store/reducer\";\r\n\r\nexport interface State {\r\n    user: User.State;\r\n    router: RouterState;\r\n    toast: ToastState;\r\n    products: ProductList.State,\r\n    cron: Cron.State\r\n}\r\n\r\nexport const initialState: State = {\r\n    user: User.initialState,\r\n    router: undefined as unknown as RouterState,\r\n    toast: Toast.initialState,\r\n    products: ProductList.initialState,\r\n    cron: Cron.initialState\r\n};\r\n\r\nexport function createReducer(history: History): Reducer<State, Action> {\r\n    const combinedReducer = combineReducers({\r\n        user: User.reducer,\r\n        router: connectRouter(history),\r\n        toast: Toast.reducer,\r\n        products: ProductList.reducer,\r\n        cron: Cron.reducer\r\n    });\r\n\r\n    return combinedReducer;\r\n}\r\n","import { SagaBase } from \"./saga-base\";\r\nimport { all } from \"redux-saga/effects\"\r\n/**\r\n * Redistributes actions to all the sagas\r\n */\r\nexport class MainSaga {\r\n\r\n    // eslint-disable-next-line\r\n    constructor(\r\n        /**\r\n         * All the sagas which are used at redux\r\n         */\r\n        protected sagas: SagaBase[]\r\n    ) { }\r\n\r\n    /**\r\n     * This should be passed as the main function of Saga middleware\r\n     */\r\n    *rootSaga(): IterableIterator<any> {\r\n        yield all(this.sagas.map(saga => saga.rootSaga()));\r\n    }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ConnectedRouter } from \"connected-react-router\";\nimport createSagaMiddleware from \"redux-saga\";\nimport { createStore } from './root/store/store';\nimport { createBrowserHistory } from \"history\";\nimport { routerMiddleware } from \"connected-react-router\";\nimport { MainSaga } from './global/store/main-saga';\nimport { UserSaga } from './login/store/saga';\nimport { Provider } from \"react-redux\";\nimport { ProductListSaga } from './products/productList/store/saga';\nimport { CronJobsSaga } from './cron/store/saga';\n\nexport const history = createBrowserHistory();\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = createStore(history, [\n  sagaMiddleware,\n  routerMiddleware(history)\n]);\n\nconst saga = new MainSaga([\n  new UserSaga(),\n  new ProductListSaga(),\n  new CronJobsSaga()\n]);\n\nsagaMiddleware.run(saga.rootSaga.bind(saga));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ConnectedRouter history={history}>\n        <App />\n      </ConnectedRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { applyMiddleware, compose, createStore as createStoreBase } from \"redux\";\r\nimport { createLogger } from 'redux-logger';\r\nimport * as Root from \"./reducer\";\r\nimport { History } from \"history\";\r\n\r\nexport function createStore(history: History, middlewares: any[]) {\r\n    let composeEnhancers = compose;\r\n\r\n    if (process.env.NODE_ENV === 'development') {\r\n        if ('__REDUX_DEVTOOLS_EXTENSION_COMPOSE__' in window) {\r\n            composeEnhancers = (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\r\n        }\r\n        middlewares.push(createLogger());\r\n    }\r\n\r\n    return createStoreBase<Root.State, any, any, any>(\r\n        Root.createReducer(history),\r\n        Root.initialState,\r\n        composeEnhancers(applyMiddleware(...middlewares))\r\n    );\r\n}\r\n"],"sourceRoot":""}